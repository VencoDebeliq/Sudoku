/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sudoku;

import java.awt.Color;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.WindowConstants;

/**
 *
 * @author damyanlh
 */
public class EndScreen extends javax.swing.JFrame {

    private SudokuLevels dificulty;

    public EndScreen(SudokuLevels dificulty) {
        this.dificulty = dificulty;

        initComponents();
        this.setResizable(false);
        this.revalidate();
        setLocationRelativeTo(null);

        scoreboard.setEditable(false);
        scoreboard.setColumns(10);
        scoreboard.setOpaque(false);
        scoreboard.setForeground(Color.black);
        scoreboard.setFont(new Font("Fira Sans", Font.BOLD, 13));
        
        

        scoreboardDisplayer();

        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        wonLabel = new javax.swing.JLabel();
        restartButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        nameField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        scoreboard = new javax.swing.JTextArea();
        saveButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        wonLabel.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        wonLabel.setText("You won!");

        restartButton.setText("Restart");
        restartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButtonActionPerformed(evt);
            }
        });

        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        scoreboard.setColumns(20);
        scoreboard.setRows(5);
        jScrollPane1.setViewportView(scoreboard);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        nameLabel.setText("Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(wonLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(saveButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nameLabel)
                            .addComponent(restartButton))
                        .addGap(68, 68, 68)
                        .addComponent(quitButton)))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(wonLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(restartButton)
                    .addComponent(quitButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartButtonActionPerformed
        new Game().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_restartButtonActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_quitButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        scoreboardSaver("Name: " + nameField.getText() + " Dificulty: " + dificulty.toString() + " Time: 2 end" + "\n");
        scoreboardDisplayer();
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EndScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EndScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EndScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EndScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EndScreen(SudokuLevels.EASY).setVisible(true);
            }
        });
    }

    private void scoreboardDisplayer() {
        ScoreboardEntry[] allScores = null;
        scoreboard.setText("");
        scoreboard.revalidate();
        String scoreboardText = "";
        try {
            //geting the scoreboard file
            File file = new File("src/Scoreboard/scoreboard.txt");
            //taking the 
            BufferedReader reader = new BufferedReader(new FileReader(file.getPath()));
            int lines = 0;
            reader.mark(10000);
            while (reader.readLine() != null) {
                lines++;
            }
            reader.reset();
            allScores = new ScoreboardEntry[lines];
            for (int i = 0; i < lines; i++) {
                if (i < lines) {
                    //only the dificulty remains
                    String temp = reader.readLine();
                    allScores[i] = new ScoreboardEntry(statExtract(temp, "Name: ", " Dificulty:"),
                            Integer.parseInt(statExtract(temp, "Time: ", " end")), 
                            statExtract(temp, "Dificulty: ", " Time:"));
                    //then sort it 
                    //!*!*! only the results for the relative dificulty should be displayed
                    // a point system can be devised so as to not fully relly on time
                    //such as counting the number of erases * them by a const and adding them to time
                    //and runing the result trough a sigmoid(x) = 1 / (1 + exp(-x))
                    //then subtract that from 1 and multiplying by 100 for *big number = good feeling*
                    //makes it very hard to get an extremly bad result and even the slightest improvement after that gives nice gains
                    //achiving extremly high rezults is hard too and makes each mistake you make more punishing at the hardest level
                    //the final score is also ajusted based on dificulty or only results from the same dificulty are shown
                } else {
                    reader.readLine();
                }
            }
            reader.close();
        } catch (IOException e) {
            System.out.println("Exception occured while displaying scoreboard");
            e.printStackTrace();
        }

        //compiling the stats from the ScoreboardEntry array and displaying them
        for (ScoreboardEntry allScore : allScores) {
            scoreboardText += "Name: " + allScore.getName() + " Dificulty: " +  dificulty.toString()  + " Time: " + allScore.getTime() + "\n";
        }
        scoreboard.setText(scoreboardText);
        scoreboard.setCaretPosition(0);
    }

    private void scoreboardSaver(String toSave) {
        try {
            File file = new File("src/Scoreboard/scoreboard.txt");
            //pisane na poslednia pobeditel v scoreboarda
            FileWriter fileWriter = new FileWriter(file.getPath(), true);
            BufferedWriter out = new BufferedWriter(fileWriter);
            out.write(toSave);
            out.close();
        } catch (IOException e) {
            System.out.println("Exception occured while saving to scoreboard");
            e.printStackTrace();
        }
    }

    public static String statExtract(String input, String word1, String word2) {
        int startIndex = input.indexOf(word1);
        int endIndex = input.indexOf(word2);

        if (startIndex == -1 || endIndex == -1 || startIndex >= endIndex) {
            System.out.println("String doesnt exist");
            return "";
        }

        return input.substring(startIndex + word1.length(), endIndex);
    }

    private class ScoreboardEntry {

        private String name;
        private String entryDificulty;
        private int time;

        public ScoreboardEntry(String name, int time, String entryDificulty) {
            this.name = name;
            this.time = time;
            this.entryDificulty = entryDificulty;
        }

        // <editor-fold defaultstate="collapsed" desc="getters and setters">
        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getEntryDificulty() {
            return entryDificulty;
        }

        public void setEntryDificulty(String entryDificulty) {
            this.entryDificulty = entryDificulty;
        }

        public int getTime() {
            return time;
        }

        public void setTime(int time) {
            this.time = time;
        }
        // </editor-fold>

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton restartButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextArea scoreboard;
    private javax.swing.JLabel wonLabel;
    // End of variables declaration//GEN-END:variables
}
